{"version":3,"sources":["api/api.js","api/posts.js","api/comments.js","components/Loader/Loader.jsx","components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","App.jsx","api/users.js","index.js"],"names":["BASE_URL","get","url","fetch","then","response","json","result","data","getPostDetails","postId","getComments","selectedPostId","allComments","filter","comment","deleteComment","commentId","method","postComment","id","name","email","body","createdAt","updatedAt","JSON","stringify","headers","Loader","className","PostsList","posts","onOpenPost","length","map","post","key","userId","title","type","classNames","button","PostsList__button","onClick","NewCommentForm","onAddComment","useState","setName","setEmail","setBody","action","onSubmit","event","a","preventDefault","value","onChange","target","placeholder","PostDetails","comments","showComments","onShowComments","onDeleteComment","App","setPosts","users","setUsers","selectedUser","setSelectedUser","setSelectedPostId","selectedPost","setSelectedPost","setComments","setShowComments","useEffect","commentAPI","updateComments","Math","floor","random","Date","user","Promise","all","postAPI","postResult","commentResult","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.402a270d.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const get = url => fetch(`${BASE_URL}${url}`)\n  .then(response => response.json())\n  .then(result => result.data);\n\nexport const remove = url => fetch(`${BASE_URL}${url}`, { method: 'DELETE' })\n  .then(response => response.json())\n  .then(result => result.data);\n\nexport const post = (url, data) => fetch(`${BASE_URL}${url}`, {\n  method: 'POST',\n  body: JSON.stringify(data),\n  headers: {\n    'Content-type': 'application/json; charset=UTF-8',\n  },\n})\n  .then(response => response.json())\n  .then(result => result.data);\n","import { get } from './api';\n\nexport const getPosts = () => get(`/posts`);\n\nexport const getUserPosts = userId => get(`/posts?userId=${userId}`);\n\nexport const getPostDetails = postId => get(`/posts/${postId}`);\n","import { get, remove, post } from './api';\n\nexport const getComments = selectedPostId => get(`/comments`)\n  .then((allComments) => {\n    const result = allComments\n      .filter(comment => comment.postId === selectedPostId);\n\n    return result;\n  });\n\nexport const deleteComment = commentId => remove(`/comments/${commentId}`);\n\nexport const postComment = ({\n  id,\n  postId,\n  name,\n  email,\n  body,\n  createdAt,\n  updatedAt,\n}) => post(`/comments`, {\n  id,\n  postId,\n  name,\n  email,\n  body,\n  createdAt,\n  updatedAt,\n});\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport './PostsList.scss';\n\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport { Loader } from '../Loader';\n\nexport const PostsList = ({\n  posts,\n  onOpenPost,\n  selectedPostId,\n}) => (posts.length === 0 ? (<Loader />) : (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    <ul className=\"PostsList__list\">\n\n      {posts.map(post => (\n        <li\n          key={post.id}\n          className=\"PostsList__item\"\n        >\n          <div>\n            <b>\n              [User #\n              {post.userId}\n              ]:\n              {' '}\n            </b>\n            {post.title}\n          </div>\n          <button\n            type=\"button\"\n            className={classNames({\n              button: true,\n              PostsList__button: true,\n              'PostsList__button--selected': selectedPostId === post.id,\n            })}\n            onClick={() => onOpenPost(post.id)}\n          >\n            {selectedPostId === post.id ? 'Close' : 'Open'}\n          </button>\n        </li>\n      ))}\n    </ul>\n  </div>\n));\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      userId: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  onOpenPost: PropTypes.func.isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\n\nimport PropTypes from 'prop-types';\n\nexport const NewCommentForm = ({ onAddComment }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      action=\"\"\n      method=\"POST\"\n      onSubmit={async(event) => {\n        event.preventDefault();\n\n        await onAddComment({\n          name, email, body,\n        });\n\n        setName('');\n        setEmail('');\n        setBody('');\n      }}\n    >\n      <div className=\"form-field\">\n        <input\n          value={name}\n          onChange={({ target }) => setName(target.value)}\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          value={email}\n          onChange={({ target }) => setEmail(target.value)}\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          value={body}\n          onChange={({ target }) => setBody(target.value)}\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  onAddComment: PropTypes.func.isRequired,\n};\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\n\nimport './PostDetails.scss';\n\nexport const PostDetails = ({\n  post,\n  comments,\n  showComments,\n  onShowComments,\n  onDeleteComment,\n  onAddComment,\n}) => (\n\n  <div className=\"PostDetails\">\n    <h2>Post details:</h2>\n\n    <section className=\"PostDetails__post\">\n      <p>{post.body}</p>\n    </section>\n\n    <section className=\"PostDetails__comments\">\n      <button\n        type=\"button\"\n        className=\"button\"\n        onClick={() => onShowComments()}\n      >\n        {`${showComments ? 'Hide' : 'Show'} ${comments.length} comments`}\n      </button>\n\n      {showComments && (\n        <ul className=\"PostDetails__list\">\n          {comments.map(comment => (\n            <li\n              key={comment.id}\n              className=\"PostDetails__list-item\"\n            >\n              <button\n                type=\"button\"\n                className=\"PostDetails__remove-button button\"\n                onClick={() => onDeleteComment(comment.id)}\n              >\n                X\n              </button>\n              <p>{comment.body}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n    </section>\n\n    <section>\n      <div className=\"PostDetails__form-wrapper\">\n        <NewCommentForm onAddComment={onAddComment} />\n      </div>\n    </section>\n  </div>\n);\n\nPostDetails.propTypes = {\n  post: PropTypes.shape({\n    body: PropTypes.string.isRequired,\n  }).isRequired,\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      body: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  showComments: PropTypes.bool.isRequired,\n  onShowComments: PropTypes.func.isRequired,\n  onDeleteComment: PropTypes.func.isRequired,\n  onAddComment: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\n\nimport * as postAPI from './api/posts';\nimport * as userAPI from './api/users';\nimport * as commentAPI from './api/comments';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nexport const App = () => {\n  const [posts, setPosts] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [selectedUser, setSelectedUser] = useState(0);\n\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [selectedPost, setSelectedPost] = useState(null);\n  const [comments, setComments] = useState([]);\n\n  const [showComments, setShowComments] = useState(true);\n\n  useEffect(() => {\n    userAPI.getUsers()\n      .then(setUsers);\n  }, []);\n\n  useEffect(() => {\n    if (!selectedUser) {\n      postAPI.getPosts()\n        .then(setPosts);\n    } else {\n      postAPI.getUserPosts(selectedUser)\n        .then(setPosts);\n    }\n  }, [selectedUser]);\n\n  const onOpenPost = (postId) => {\n    setSelectedPostId(postId);\n\n    Promise.all([\n      postAPI.getPostDetails(postId),\n      commentAPI.getComments(postId),\n    ]).then(([postResult, commentResult]) => {\n      setSelectedPost(postResult);\n      setComments(commentResult);\n    });\n  };\n\n  const onShowComments = () => {\n    setShowComments(!showComments);\n  };\n\n  const onDeleteComment = async(commentId) => {\n    await commentAPI.deleteComment(commentId);\n\n    updateComments();\n  };\n\n  const onAddComment = async({ name, email, body }) => {\n    const data = {\n      name,\n      email,\n      body,\n      id: Math.floor(Math.random() * 10000),\n      postId: selectedPostId,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    await commentAPI.postComment(data);\n    updateComments();\n  };\n\n  const updateComments = () => {\n    commentAPI.getComments(selectedPostId)\n      .then(setComments);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            value={selectedUser}\n            onChange={({ target }) => setSelectedUser(+target.value)}\n            className=\"App__user-selector\"\n          >\n            <option value=\"\">All users</option>\n            {users.map(user => (\n              <option\n                value={user.id}\n                key={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            onOpenPost={onOpenPost}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {!selectedPost\n            ? (<p>No selected posts</p>)\n            : (\n              <PostDetails\n                post={selectedPost}\n                comments={comments}\n                showComments={showComments}\n                onShowComments={onShowComments}\n                onDeleteComment={onDeleteComment}\n                onAddComment={onAddComment}\n              />\n            )\n          }\n        </div>\n\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { get } from './api';\n\nexport const getUsers = () => get(`/users`);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}